#include<iostream>
#include <iomanip>
#include<cmath>
using namespace std;
int main()
{
	// -------定义变量----------
	int i = 0, j = 2;
	double a = 3.1415926;
	double p, l, d, x[11], y[11];
	// --------输入中心点坐标和一个凸拐点坐标用来确定五角星的形状---------
	cout << "请输入中心点坐标：\n";
	cout << "x[0]=";
	cin >> x[0];
	cout << "y[0]=";
	cin >> y[0];
	cout << "请输入一个凸拐点坐标：\n";
	cout << "x[1]=";
	cin >> x[1];
	cout << "y[1]=";
	cin >> y[1];
	// -----求出凸拐点所在圆的半径-------
	l = sqrt(pow(x[1] - x[0], 2.0)+ pow(y[1] - y[0], 2));
	// -----以中小点的y坐标和第一个凸拐点的坐标来确定角度p----
	if (y[0] - y[1] > 0)
		p = a - 0.5 * a - atan((x[0] - x[1]) / (y[0] - y[1]));
	else if (y[0] - y[1] == 0)
		p = a - atan((x[0] - x[1]) / (y[0] - y[1]));
	else
		p = a + 0.5 * a - atan((x[0] - x[1]) / (y[0] - y[1]));
	// ------计算并打印四个凸拐点的坐标-------
	cout << "其余四个凸拐点的坐标为：\n";
	for (i = 2;i < 6;i++)
	{
		x[i] = (x[1] - x[0]) * cos((i - 1) * 72.0 / 180.0 * a) - (y[1] - y[0]) * sin((i - 1) * 72.0 / 180.0 * a) + x[0];
		y[i] = (x[1] - x[0]) * sin((i - 1) * 72.0 / 180.0 * a) + (y[1] - y[0]) * cos((i - 1) * 72.0 / 180.0 * a) + y[0];
		//运用向量旋转公式：
		//已知 A（x1,y1）绕 B（x0,y0）旋转到 C（X,Y）且角 ABC 为 θ,则 X-x0=(x1-
		//x0)cosθ-（y1-y0）sinθ;
		 //Y-y0=(x1-x0)sinθ+（y1-y2）cosθ;
		cout << "x[" << ++j << "]=" << fixed << setprecision(3) << x[i] << ",y[" << j << "]=" << fixed << setprecision(3) << y[i] << endl;
	}
	cout << "五个凹拐点的坐标为：\n";
	// -----用上面计算的半径和p值来计算凹拐点所在圆的半径------
	d = l * sin(54.0 / 180.0 * a) - l * cos(54.0 / 180.0 * a) * tan(36.0 / 180.0 * a);
	// -----运用坐标方位角知识，左折角为 36°来计算第一个凹拐点坐标-----
	x[6] = x[0] - d * cos(p + 36.0 / 180.0 * a);
	y[6] = y[0] - d * sin(p + 36.0 / 180.0 * a);
	cout << "x[6]=" << fixed << setprecision(3) << x[6] << "y[6]=" << fixed << setprecision(3) << y[6] << endl;
	j = 7;
	// ------计算并打印五个凹拐点的坐标-------
	for (i = 7;i < 11;i++)
	{
		x[i] = (x[6] - x[0]) * cos((i - 6) * (72.0 / 180.0) * a) - (y[6] - y[0]) * sin((i - 6) * (72.0 / 180.0) * a) + x[0];
		y[i] = (x[6] - x[0]) * sin((i - 6) * (72.0 / 180.0) * a) + (y[6] - y[0]) * cos((i - 6) * (72.0 / 180.0) * a) + y[0];
		//方法同上，旋转
		cout << "x[" << ++j << "]=" << fixed << setprecision(3) << x[i] << ",y[" << j << "]=" << fixed << setprecision(3) << y[i] << endl;
	}
	// --------程序结束--------
	return 0;
}